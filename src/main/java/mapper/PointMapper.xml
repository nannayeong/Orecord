<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="impl.PointImpl"> 
	<!-- 유저 전체정보 조회 -->
	<select id="selectUserInfo" resultType="model.MemberDTO" parameterType="String">
		SELECT * FROM member WHERE id=#{loginId}
	</select>

	<!-- 충전내역 건수 조회 -->
	<select id="selectChargeLogTotalCount" resultType="int" parameterType="hashmap">
		SELECT count(*)
		FROM chargeLog 
    WHERE id=#{loginId} AND 
    	trunc(regidate) between #{fromDate} and #{toDate}
    ORDER BY regidate DESC
	</select>
	<!-- 충전내역 조회 -->
	<select id="selectChargeLog" resultType="model.ChargeDTO" parameterType="hashmap">
		SELECT * 
		FROM (
					SELECT A.*, rownum recordNum 
					FROM (
								SELECT regidate, chargePoint, paymentType
								FROM chargeLog
								WHERE id=#{loginId} AND 
									trunc(regidate) between #{fromDate} and #{toDate}
    						ORDER BY regidate DESC
					) A
		)
		WHERE recordNum between #{startRecord} and #{endRecord}
	</select>
	
	
	<!-- 후원한내역 건수 조회 -->
	<select id="selectSponsorLogTotalCount" resultType="int" parameterType="hashmap">
		SELECT count(*)
		FROM sponsorshipLog 
    WHERE sponsorId=#{loginId} AND 
    	trunc(regidate) between #{fromDate} and #{toDate}
    ORDER BY regidate DESC
	</select>
	<!-- 후원한내역 조회 -->
	<select id="selectSponsorLog" resultType="model.SponsorshipDTO" parameterType="hashmap">
		SELECT * 
		FROM (
					SELECT A.*, rownum recordNum 
					FROM (
								SELECT regidate, sponPoint, patronId
								FROM sponsorshipLog
								WHERE sponsorId=#{loginId} AND 
									trunc(regidate) between #{fromDate} and #{toDate}
    						ORDER BY regidate DESC
					) A
		)
		WHERE recordNum between #{startRecord} and #{endRecord}
	</select>
	
	
	<!-- 후원 받은 내역 건수 조회 -->
	<select id="selectPatronLogTotalCount" resultType="int" parameterType="hashmap">
		SELECT count(*)
		FROM sponsorshipLog 
    WHERE patronId=#{loginId} AND 
    	trunc(regidate) between #{fromDate} and #{toDate}
    ORDER BY regidate DESC
	</select>
	<!-- 후원 받은 내역 조회 -->
	<select id="selectPatronLog" resultType="model.SponsorshipDTO" parameterType="hashmap">
		SELECT * 
		FROM (
					SELECT A.*, rownum recordNum 
					FROM (
								SELECT regidate, sponPoint, sponsorId
								FROM sponsorshipLog
								WHERE patronId=#{loginId} AND 
									trunc(regidate) between #{fromDate} and #{toDate}
    						ORDER BY regidate DESC
					) A
		)
		WHERE recordNum between #{startRecord} and #{endRecord}
	</select>
	
	<!-- 파티보드에 receiverId(협업 받는 아이디 컬럼 추가 후 테이블, 검색조건, 추출 컬럼(point, regidate, id) 변경-->
	<!-- 협업한 내역 건수 조회 -->
	<select id="selectContributorLogTotalCount" resultType="int" parameterType="hashmap">
		SELECT count(*)
		FROM partyboard 
    WHERE id=#{loginId} AND 
    	trunc(regidate) between #{fromDate} and #{toDate}
    ORDER BY regidate DESC
	</select>
	<!-- 협업한 내역 조회 -->
	<select id="selectContributorLog" resultType="model.PartyBoardDTO" parameterType="hashmap">
		SELECT * 
		FROM (
					SELECT A.*, rownum recordNum 
					FROM (
								SELECT regidate, point, receiverId
								FROM partyboard
								WHERE id=#{loginId} AND 
									trunc(regidate) between #{fromDate} and #{toDate}
    						ORDER BY regidate DESC
					) A
		)
		WHERE recordNum between #{startRecord} and #{endRecord}
	</select>
	
	
	<!-- 협업 받은 내역 건수 조회 -->
	<select id="selectReceiverLogTotalCount" resultType="int" parameterType="hashmap">
		SELECT count(*)
		FROM partyboard 
    WHERE receiverId=#{loginId} AND 
    	trunc(regidate) between #{fromDate} and #{toDate}
    ORDER BY regidate DESC
	</select>
	<!-- 협업 받은 내역 조회 -->
	<select id="selectReceiverLog" resultType="model.PartyBoardDTO" parameterType="hashmap">
		SELECT * 
		FROM (
					SELECT A.*, rownum recordNum 
					FROM (
								SELECT regidate, point, id
								FROM partyboard
								WHERE receiverId=#{loginId} AND 
									trunc(regidate) between #{fromDate} and #{toDate}
    						ORDER BY regidate DESC
					) A
		)
		WHERE recordNum between #{startRecord} and #{endRecord}
	</select>
	
	
	<!-- 환전내역 건수 조회 -->
	<select id="selectExchangeLogTotalCount" resultType="int" parameterType="hashmap">
		SELECT count(*)
		FROM exchangeLog 
    WHERE id=#{loginId} AND 
    	trunc(regidate) between #{fromDate} and #{toDate}
    ORDER BY regidate DESC
	</select>
	<!-- 환전내역 조회 -->
	<select id="selectExchangeLog" resultType="model.ExchangeDTO" parameterType="hashmap">
		SELECT * 
		FROM (
					SELECT A.*, rownum recordNum 
					FROM (
								SELECT regidate, exchangePoint, exchangedMoney, accountBank, exchangeResult
								FROM exchangeLog
								WHERE id=#{loginId} AND 
									trunc(regidate) between #{fromDate} and #{toDate}
    						ORDER BY regidate DESC
					) A
		)
		WHERE recordNum between #{startRecord} and #{endRecord}
	</select>
	
	
	<!-- 결제후 포인트 내역 삽입 -->
	<insert id="insertChargeLog" parameterType="hashmap">
		INSERT INTO chargeLog(idx, id, totalPayment, vat, chargePoint, paymentType, paymentResult, regidate)
    	VALUES (seq_chargeLog.nextval, #{loginId}, #{totalPayment}, #{VAT}, #{chargePoint}, #{paymentType}, default, default)
	</insert>
	<!-- 결제후 마이포인트 업데이트 -->
	<update id="updateChargeMyPoint">
		UPDATE MEMBER set myPoint = (myPoint + #{chargePoint}) WHERE id=#{loginId}
	</update>
	
	<!-- 후원하는 사람 포인트 감소 -->
	<update id="updateSponsorPoint">
		UPDATE MEMBER set myPoint = (myPoint - #{param2}) WHERE id=#{param1}
	</update>
	<!-- 후원받는 사람 포인트 감소 -->
	<update id="updatePatronPoint">
		UPDATE MEMBER set myPoint = (myPoint + #{param2}) WHERE id=#{param1}
	</update>
	
	
	<!-- 환전신청시 환전 내역 삽입 -->
	<insert id="insertExchangeLog" parameterType="hashmap">
		INSERT INTO exchangeLog(idx, id, exchangePoint, exchangeFee, exchangedMoney, accountBank, accountNumber, accountName, regidate, exchangeResult)
    	VALUES (seq_exchangeLog.nextval, #{exchangeId}, #{exchangePoint}, #{exchangeFee}, #{exchangedMoney}, #{bankName}, #{accountNum}, #{accountName}, default, default)
	</insert>
	<!-- 환전신청후 마이포인트 업데이트 -->
	<update id="updateExchangeMyPoint">
		UPDATE MEMBER set myPoint = (myPoint - #{exchangePoint}) WHERE id=#{exchangeId}
	</update>
	
	<update id="exchangeApprove">
		UPDATE EXCHANGELOG set EXCHANGERESULT = 1 WHERE IDX=#{0}
	</update>
</mapper>
